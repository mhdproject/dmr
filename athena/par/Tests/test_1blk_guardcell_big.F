!----------------------------------------------------------------------
! PARAMESH - an adaptive mesh library.
! Copyright (C) 2003
!
! Use of the PARAMESH software is governed by the terms of the
! usage agreement which can be found in the file
! 'PARAMESH_USERS_AGREEMENT' in the main paramesh directory.
!----------------------------------------------------------------------

#include "paramesh_preprocessor.fh"

!# define DEBUG

      program test_1blk_guardcell_big





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! include file to define physical qualities of the model and mesh
      use paramesh_dimensions
      use physicaldata
      use mpi_morton

! include file defining the tree
      use tree
      use workspace

      use paramesh_interfaces, only : comm_start,
     &                                amr_initialize,
     &                                amr_refine_derefine,
     &                                amr_1blk_copy_soln,
     &                                amr_guardcell,
     &                                amr_prolong,
     &                                amr_1blk_guardcell,
     &                                amr_1blk_guardcell_reset,
     &                                amr_1blk_restrict,
     &                                guardcell_test,
     &                                mesh_test,
     &                                amr_close

#ifdef MPI_USED
      use paramesh_mpi_interfaces, only : 
     &                                mpi_morton_bnd,
     &                                mpi_amr_comm_setup,
     &                                mpi_amr_1blk_restrict,
     &                                mpi_morton_bnd_prolong1
#endif /* MPI_USED */


! include file required for shmem library.
#include "amr_shmem.fh"

! Only required for programs in ./Tests
#include "test_defs.fh"

#ifdef MPI_USED
      include 'mpif.h'

      integer :: tag_offset,max_blks_sent
#endif /* MPI_USED */

      integer nguard0
      parameter(nguard0 = nguard*npgs)
      integer nguard_work0
      parameter(nguard_work0 = nguard_work*npgs)

      integer :: three,four,five, six


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! local amr variables
      integer nprocs,mype
      integer shmem_my_pe,shmem_n_pes,num_procs

      save mype

#ifndef LIBRARY
      logical tnewchild(maxblocks_tr)
#else
      logical, allocatable :: tnewchild(:)
#endif

!
! application specific variables

      real :: accuracy
      integer iopt,nlayers,icoord
      integer ierror_sum,ierror_tot
      logical lrefine_again,ltype2only
      logical lcc, lfc, lec, lnc, l_srl_only, ldiag

      logical :: lmpi,lnperm,ladvanceall
      integer :: errorcode,errcode

      logical :: lguard,lprolong,lflux,ledge,lrestrict
      logical :: lfulltree

      integer   ngmax , ngd
      parameter(ngmax = max(nguard,nguard_work))
      integer :: nlayersx, nlayersy, nlayersz
      integer :: mort(6)


      save ierror_sum,ierror_tot

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      accuracy = 10.**(-precision(v0)+3)
      
#ifdef SGI_SHMEM
      call comm_start(maxprocs,nprocs,mype)
#endif
!      call amr_initialize (1000)
      call amr_initialize ()

      interp_mask_unk(:) = 1
      interp_mask_work(:) = 1
      interp_mask_facex(:) = 1
      interp_mask_facey(:) = 1
      interp_mask_facez(:) = 1
      interp_mask_ec(:) = 1
      interp_mask_nc(:) = 1

#ifdef LIBRARY
      allocate(tnewchild(maxblocks_tr))
#endif

      ierror_sum = 0
      ierror_tot = 0

      do iloop = 1,ndim

      icoord = iloop
      write(*,*) 'starting loop : icoord = ',icoord

      if (icoord == 1) then
         nlayersx = nguard
         nlayersy = 1
         nlayersz = 1
      elseif (icoord == 2) then
         nlayersx = 1
         nlayersy = nguard
         nlayersz = 1
      elseif (icoord == 3) then
         nlayersx = 1
         nlayersy = 1
         nlayersz = nguard
      end if
      icoord = 0
        
!      call shmem_barrier_all()



       if(iloop.gt.1) then
!-------------------------------
!      call amr_initialize

! We would have liked to call amr_initialize here, but because it
! calls comm_start, we cannot call it inside a loop. So instead we
! reproduce the necessary lines from amr_initialize here.

! initialize tree data structure
        bsize(:,:) = -1.
        lrefine(:) = -1
        nodetype(:) = -1
        type_of_child(:,:) = -1
        type_of_neigh(:,:) = -1
        stay(:) = .TRUE.
        refine(:) = .FALSE.
        derefine(:) = .FALSE.
        parent(:,:) = -1
        child(:,:,:) = -1
        which_child(:) = -1
        coord(:,:) = -1.
        bnd_box(:,:,:) = -1.
        neigh(:,:,:) = -1
        empty(:) = 0
        bflags(:,:) = -1
        work_block(:) = 0.
        surr_blks(:,:,:,:,:) = -1

! initialize solution arrays
        unk(:,:,:,:,:) = 0.
        unk_n(:,:,:,:,:) = 0.
        unk_e_x(:,:,:,:,:) = 0.
        unk_e_y(:,:,:,:,:) = 0.
        unk_e_z(:,:,:,:,:) = 0.
        facevarx(:,:,:,:,:) = 0.
        facevary(:,:,:,:,:) = 0.
        facevarz(:,:,:,:,:) = 0.

        call amr_1blk_guardcell_reset

! Mark amr_gsurrounding_blks uncalled. This will be set to +1 if
! and when amr_gsurrounding_blks is called.
        gsurrblks_set = -1

        
!-------------------------------
       endif



#ifdef CONSERVE
      write(*,*) 'CONSERVE must not be defined for this test!'
      call amr_abort()
#endif

      mype = shmem_my_pe()
      nprocs = shmem_n_pes()


#ifdef DIAGONALS
      write(*,*) 'diagonals on '
#endif

      write(*,*) ' SHMEM_REDUCE_SYNC_SIZE ',SHMEM_REDUCE_SYNC_SIZE
      write(*,*) ' SHMEM_REDUCE_MIN_WRKDATA_SIZE ',
     .                SHMEM_REDUCE_MIN_WRKDATA_SIZE


! set default value of dz and z0 to cater for 2D case.
      z0 = 0.
      dz = 0.


      iopt = 1
      nlayers = nguard
      if(mype.eq.0) write(*,*) 'nlayers = ',nlayers

!

! set a limit on the refinement level
      lrefine_max = 50
      lrefine_min = 1

      ax = 1.
      ay = 10.
      az = 100.
#ifdef TESTXDIR
      ax = 1.
      ay = 0.
      az = 0.
#endif
#ifdef TESTYDIR
      ax = 0.
      ay = 1.
      az = 0.
#endif
#ifdef TESTZDIR
      if (ndim == 3) then
      ax = 0.
      ay = 0.
      az = 1.
      end if
#endif


! set the workspace array layer to be tested
      ioptw = 3


      if(ioptw-1.gt.nvar_work) then
          write(*,*) 'ERROR: Too few work arrays'
          write(*,*) 'ERROR: Reset nvar_work.'
          call amr_abort
      endif

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! set up initial grid state.

      g_xmin = 0.
      g_xmax = 1.
      g_ymin = 0.
      g_ymax = 1.
      g_zmin = 0.
      g_zmax = 1.

! set up a single block covering the whole cubic domain
      lnblocks = 0
      if(mype.eq.0.) then
                lnblocks = 1
                bsize(:,1)=1.
                coord(:,1) = .5
                bnd_box(1,:,1) = g_xmin
                bnd_box(2,:,1) = g_xmax
                nodetype(1) = 1
                lrefine(1) = 1

                neigh(:,:,1) = -21

                refine(1)=.true.
      endif


      boundary_index = -21
! x boundaries
      boundary_box(1,2:3,1:2) = -1.e30
      boundary_box(2,2:3,1:2) =  1.e30
      boundary_box(1,1,1) = -1.e30
      boundary_box(2,1,1) = g_xmin
      boundary_box(1,1,2) = g_xmax
      boundary_box(2,1,2) = 1.e30
! y boundaries
      if(ndim.ge.2) then
      three = (2*k2d) + 1
      four  = three + k2d
      boundary_box(1,1,three:four) = -1.e30
      boundary_box(2,1,three:four) =  1.e30
      boundary_box(1,3,three:four) = -1.e30
      boundary_box(2,3,three:four) =  1.e30
      boundary_box(1,2,three) = -1.e30
      boundary_box(2,2,three) = g_ymin
      boundary_box(1,2,four) = g_ymax
      boundary_box(2,2,four) = 1.e30
      endif
! z boundaries
      if(ndim.eq.3) then
      five = (4*k3d) + 1
      six  = five + k3d
      boundary_box(1,1:2,five:six) = -1.e30
      boundary_box(2,1:2,five:six) =  1.e30
      boundary_box(1,3,five) = -1.e30
      boundary_box(2,3,five) = g_zmin
      boundary_box(1,3,six) = g_zmax
      boundary_box(2,3,six) = 1.e30
      endif
      
      call shmem_barrier_all()


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!start test
! set the solution array to be the grid points x,y or z coordinates
        do l=1,lnblocks
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

       if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
       dy = bsize(2,l)/real(nyb)
       dx = bsize(1,l)/real(nxb)
       do k=1+nguard0*k3d,nzb+nguard0*k3d
       do j=1+nguard0,nyb+nguard0
       do i=1+nguard0,nxb+nguard0
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)+dx*real(i-nguard0)
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)+dy*real(j-nguard0)
       if(ndim.eq.3) z0 = 
     .       coord(3,l)-.5*(bsize(3,l)+dz)+dz*real(k-nguard0)
       do ivar=1,nvar
       value = ax*(x0**interp_mask_unk(ivar)) + 
     .         ay*(y0**interp_mask_unk(ivar)) +
     .         az*(z0**interp_mask_unk(ivar))
       unk(ivar,i,j,k,l) = value*real(ivar)
       enddo
       enddo
       enddo
       enddo

       do k=1+nguard_work0*k3d,nzb+nguard_work0*k3d
       do j=1+nguard_work0,nyb+nguard_work0
       do i=1+nguard_work0,nxb+nguard_work0
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)+dx*real(i-nguard_work0)
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)+dy*real(j-nguard_work0)
       if(ndim.eq.3) z0 = 
     .       coord(3,l)-.5*(bsize(3,l)+dz)+dz*real(k-nguard_work0)
       value = ax*(x0**interp_mask_work(ioptw-1)) +
     .         ay*(y0**interp_mask_work(ioptw-1)) +
     .         az*(z0**interp_mask_work(ioptw-1))
       work(i,j,k,l,ioptw-1) = value
       enddo
       enddo
       enddo


       if(nvarcorn.gt.0) then

       if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
       dy = bsize(2,l)/real(nyb)
       dx = bsize(1,l)/real(nxb)
       do k=1+nguard0*k3d,nzb+nguard0*k3d+k3d
       do j=1+nguard0,nyb+nguard0+k2d
       do i=1+nguard0,nxb+nguard0+1
       x0 = coord(1,l)-.5*bsize(1,l)-dx+dx*real(i-nguard0)
       y0 = coord(2,l)-.5*bsize(2,l)-dy+dy*real(j-nguard0)
       if(ndim.eq.3) z0 =
     .       coord(3,l)-.5*bsize(3,l)-dz+dz*real(k-nguard0)
       do ivar=1,nvarcorn
       value = ax*(x0**interp_mask_nc(ivar)) + 
     .         ay*(y0**interp_mask_nc(ivar)) + 
     .         az*(z0**interp_mask_nc(ivar))
       unk_n(ivar,i,j,k,l) = value*real(ivar)
       enddo
       enddo
       enddo
       enddo

       endif

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo
      call shmem_barrier_all()



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! set up data in facevarx etc

      if(nfacevar.gt.0) then

        do l=1,lnblocks
#ifndef ADVANCE_ALL_LEVELS
        if(nodetype(l).eq.1) then
#endif


              if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
              dy = bsize(2,l)/real(nyb)
              dx = bsize(1,l)/real(nxb)
              if(mod(nxb,2).eq.1) then
                      if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                      dy = bsize(2,l)/real(nyb-1)
                      dx = bsize(1,l)/real(nxb-1)
              endif


              do k=1+nguard0*k3d,nzb+nguard0*k3d
                if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
                zk = z0 + dz*real(k-nguard0)
                  do j=1+nguard0,nyb+nguard0
                    y0 = coord(2,l)-.5*(bsize(2,l)+dy)
                    yj = y0 + dy*real(j-nguard0)
                    do i=1+nguard0,nxb+nguard0+1
                      x0 = coord(1,l)-.5*bsize(1,l)-dx
                      xi = x0 + dx*real(i-nguard0)
                      do ivar=1,nbndvar
                        value = ax*(xi**interp_mask_facex(ivar))+
     .                          ay*(yj**interp_mask_facex(ivar))+
     .                          az*(zk**interp_mask_facex(ivar))
                        facevarx(ivar,i,j,k,l)=value*real(ivar)
                      enddo
                    enddo
                  enddo
              enddo

              do k=1+nguard0*k3d,nzb+nguard0*k3d
                if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
                zk = z0 + dz*real(k-nguard0)
                do i=1+nguard0,nxb+nguard0
                  x0 = coord(1,l)-.5*(bsize(1,l)+dx)
                  xi = x0 + dx*real(i-nguard0)
                  do j=1+nguard0,nyb+nguard0+1
                    y0 = coord(2,l)-.5*bsize(2,l)-dy
                    yj = y0 + dy*real(j-nguard0)
                    do ivar=1,nbndvar
                      value = ax*(xi**interp_mask_facey(ivar))+
     .                        ay*(yj**interp_mask_facey(ivar))+
     .                        az*(zk**interp_mask_facey(ivar))
                      facevary(ivar,i,j,k,l)=value*real(ivar)
                    enddo
                  enddo
                enddo
              enddo

              do j=1+nguard0,nyb+nguard0
                y0 = coord(2,l)-.5*(bsize(2,l)+dy)
                yj = y0 + dy*real(j-nguard0)
                do i=1+nguard0,nxb+nguard0
                  x0 = coord(1,l)-.5*(bsize(1,l)+dx)
                  xi = x0 + dx*real(i-nguard0)
                  do k=1+nguard0*k3d,nzb+(nguard0+1)*k3d
                    if(ndim.eq.3) z0 = 
     .                       coord(3,l)-.5*bsize(3,l)-dz
                    zk = z0 + dz*real(k-nguard0)
                    do ivar=1,nbndvar
                      value = ax*(xi**interp_mask_facez(ivar))+
     .                        ay*(yj**interp_mask_facez(ivar))+
     .                        az*(zk**interp_mask_facez(ivar))
                      facevarz(ivar,i,j,k,l)=value*real(ivar)
                    enddo
                  enddo
                enddo
              enddo

#ifndef ADVANCE_ALL_LEVELS
        endif
#endif
      enddo

      endif

! set up data in unk_e_x[y][z] 

      if(nvaredge.gt.0) then

      do l=1,lnblocks
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).le.2) then
#endif
 
              if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
              dy = bsize(2,l)/real(nyb)
              dx = bsize(1,l)/real(nxb)
              if(mod(nxb,2).eq.1) then
                      if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                      dy = bsize(2,l)/real(nyb-1)
                      dx = bsize(1,l)/real(nxb-1)
              endif
 
              do k=1+nguard0*k3d,nzb+(nguard0+1)*k3d
                if(ndim.eq.3) z0 = coord(3,l)-.5*bsize(3,l)-dz
                zk = z0 + dz*real(k-nguard0)
                  do j=1+nguard0,nyb+nguard0+1
                    y0 = coord(2,l)-.5*bsize(2,l)-dy
                    yj = y0 + dy*real(j-nguard0)
                    do i=1+nguard0,nxb+nguard0
                      x0 = coord(1,l)-.5*(bsize(1,l)+dx)
                      xi = x0 + dx*real(i-nguard0)
                      do ivar=1,nvaredge
                         value = ax*(xi**interp_mask_ec(ivar))+
     .                           ay*(yj**interp_mask_ec(ivar))+
     .                           az*(zk**interp_mask_ec(ivar))
                        unk_e_x(ivar,i,j,k,l)=value*real(ivar)
                      enddo
                    enddo
                  enddo
              enddo                                          

              do k=1+nguard0*k3d,nzb+(nguard0+1)*k3d
                if(ndim.eq.3) z0 = coord(3,l)-.5*bsize(3,l)-dz
                zk = z0 + dz*real(k-nguard0)
                do i=1+nguard0,nxb+nguard0+1
                  x0 = coord(1,l)-.5*bsize(1,l)-dx
                  xi = x0 + dx*real(i-nguard0)
                  do j=1+nguard0,nyb+nguard0
                    y0 = coord(2,l)-.5*(bsize(2,l)+dy)
                    yj = y0 + dy*real(j-nguard0)
                    do ivar=1,nvaredge
                      value = ax*(xi**interp_mask_ec(ivar))+
     .                        ay*(yj**interp_mask_ec(ivar))+
     .                        az*(zk**interp_mask_ec(ivar))
                      unk_e_y(ivar,i,j,k,l)=value*real(ivar)
                    enddo
                  enddo
                enddo
              enddo
 
              do j=1+nguard0,nyb+nguard0+1
                y0 = coord(2,l)-.5*bsize(2,l)-dy
                yj = y0 + dy*real(j-nguard0)
                do i=1+nguard0,nxb+nguard0+1
                  x0 = coord(1,l)-.5*bsize(1,l)-dx
                  xi = x0 + dx*real(i-nguard0)
                  do k=1+nguard0*k3d,nzb+nguard0*k3d
                    if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
                    zk = z0 + dz*real(k-nguard0)
                    do ivar=1,nvaredge
                      value = ax*(xi**interp_mask_ec(ivar))+
     .                        ay*(yj**interp_mask_ec(ivar))+
     .                        az*(zk**interp_mask_ec(ivar))
                      unk_e_z(ivar,i,j,k,l)=value*real(ivar)
                    enddo
                  enddo
                enddo
              enddo
 
#ifndef ADVANCE_ALL_LEVELS
        endif
#endif
      enddo

      endif

      call shmem_barrier_all()

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      loop_count=0
! Now cycle over blocks adjusting refinement of initial setup as required
        do while(loop_count.lt.lrefine_max)


        refine(:) = .false.
      if(loop_count < 2) then
         refine(:) = .true.
      elseif(loop_count >= 2) then
        if(ndim.eq.3) then
         do l=1,lnblocks
!            if (neigh(1,1,l) <= -20 .and. neigh(1,3,l) <= -20 .and.
!     .          neigh(1,5,l) <= -20)
!     .          refine(l) = .true.

            if (nodetype(l) == 1) then
            if (coord(1,l) > .5 - bsize(1,l) .and. 
     .          coord(1,l) < .5) then
            if (coord(2,l) > .5 - bsize(2,l) .and. 
     .          coord(2,l) < .5) then
            if (coord(3,l) > .5 - bsize(3,l) .and. 
     .          coord(3,l) < .5) then
               refine(l) = .true.
            endif
            endif
            endif
            endif

!           if( coord(1,l).eq..125.and.coord(2,l).eq..125.and.
!     .         coord(3,l).eq..125) refine(l)=.true.
!           if( coord(1,l).eq..375.and.coord(2,l).eq..375.and.
!     .       coord(3,l).eq..375) refine(l)=.true.
!           if( coord(1,l).eq..625.and.coord(2,l).eq..875.and.
!     .       coord(3,l).eq..875) refine(l)=.true.
         enddo
        elseif(ndim.eq.2) then
! refine lower left corner
         do l=1,lnblocks
            if (neigh(1,1,l) <= -20 .and. neigh(1,3,l) <= -20)
     .          refine(l) = .true.
!           if( coord(1,l).eq..125.and.coord(2,l).eq..125)
!     .         refine(l)=.true.
!           if( coord(1,l).eq..375.and.coord(2,l).eq..375)
!     .         refine(l)=.true.
!           if( coord(1,l).eq..625.and.coord(2,l).eq..875)
!     .         refine(l)=.true.
           enddo
        endif
      endif


! refine grid and apply morton reordering to grid blocks if necessary

      if (mype == 0) print *,' CALLING amr_refine_derefine '
      call amr_refine_derefine
      if (mype == 0) print *,' DONE amr_refine_derefine '

      noff = (nguard_work - nguard)*npgs
      if(noff.ge.0) then
        work(il_bnd+noff:iu_bnd+noff,jl_bnd+noff*k2d:ju_bnd+noff*k2d,
     .       kl_bnd+noff*k3d:ku_bnd+noff*k3d,:,ioptw-1) = 
     .   unk(1,il_bnd:iu_bnd,jl_bnd:ju_bnd,kl_bnd:ku_bnd,:)
      else
        work(ilw:iuw,jlw:juw,klw:kuw,:,ioptw-1) =
     .   unk(1,il_bnd-noff:iu_bnd+noff,
     .         jl_bnd-noff*k2d:ju_bnd+noff*k2d,
     .         kl_bnd-noff*k3d:ku_bnd+noff*k3d,:)
      endif

      call shmem_barrier_all()

! a global prolongation call resets the newchild marker flags to false.
! Thus to test prolong for work we will need to restore this after the
! prolongation is applied to unk and facevar's
      tnewchild(:) = newchild(:)

#ifdef MPI_USED
      tag_offset = 100
      call mpi_morton_bnd_prolong1
     .             (mype,nprocs,tag_offset)

#ifdef DEBUG
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
       write(*,*) 'exited mpi_morton_bnd_prolong1 : pe ',mype,
     .    ' loop_count = ',loop_count
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
#endif /* DEBUG */

#endif /* MPI_USED */

       if (mype == 0) print *,' DONE mpi_morton_bnd_prolong1 '

      iopt = 1
      nlayers = nguard
#ifdef MPI_USED
      call amr_prolong(mype,iopt,nlayers)
#ifdef DEBUG
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
       write(*,*) 'exited amr_prolong : pe ',mype,
     .    ' loop_count = ',loop_count
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
#endif /* DEBUG */
#else
      call amr_prolong(mype,iopt,nlayers)
#endif /* MPI_USED */

#ifdef DEBUG
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
       write(*,*) 'finished amr_prolong for unk : pe ',mype,
     .    ' loop_count = ',loop_count
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)

       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
       write(*,*) 'starting amr_prolong for work : pe ',mype,
     .    ' loop_count = ',loop_count
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
#endif /* DEBUG */


      if (mype == 0) print *,' DONE prolong unk '

      newchild(:) = tnewchild(:)
      iopt = ioptw
      nlayers = nguard_work
      lcc = .true.
      lfc = .false.
      lec = .false.
      lnc = .false.
#ifdef MPI_USED
      call amr_prolong(mype,iopt,nlayers)
#else
      call amr_prolong(mype,iopt,nlayers)
#endif /* MPI_USED */
!      call amr_guardcell(mype,iopt,nlayers)
#ifdef DEBUG
      do lb = 1,lnblocks
       do j=jlw,juw
       write(*,*) 'work ',mype,lb,j,work(:,j,1,lb,iopt-1)
       enddo
      enddo

       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
       write(*,*) 'finished amr_prolong for work : pe ',mype,
     .    ' loop_count = ',loop_count
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
#endif /* DEBUG */

      if (mype == 0) print *,' DONE prolong work '

#ifdef TEMP_TEST
!-----
#ifndef ADVANCE_ALL_LEVELS
       write(*,*) 'This part not tested '
       write(*,*) 'Should be added in other test programs '
#ifdef MPI_USED
       call mpi_amr_1blk_restrict(mype,iopt,lcc,lfc,lec,lnc,.true.)
#else
       call amr_1blk_restrict(mype,iopt,lcc,lfc,lec,lnc,.true.)
#endif /* MPI_USED */
#endif /* ADVANCE_ALL_LEVELS */
!-----
#endif /* TEMP_TEST */


      if (mype == 0) print *,' DONE restrict '


      loop_count=loop_count+1
      if (mype == 0) write(*,*) 'loop_count ',loop_count

      enddo
      call shmem_barrier_all()


#ifdef NO_PERMANENT_GUARDCELLS
! Store a copy of the current solution in gt_unk
      call amr_1blk_copy_soln(-1)
#endif /* NO_PERMANENT_GUARDCELLS */

#ifdef MPI_USED
      tag_offset = 100
      call mpi_morton_bnd(mype,nprocs,tag_offset)
#endif /* MPI_USED */

      iopt = 1


#ifndef NO_PERMANENT_GUARDCELLS


! set guard cell data to zero to ensure proper test of guardcell
! set external guard cell data.
       call zero_guardcells(ioptw)


      iopt = 1
      nlayers = nguard
#ifdef MPI_USED
      lcc = .true.
      lfc = .true.
      lec = .true.
      lnc = .true. 
      tag_offset = 100
      call amr_guardcell(mype,iopt,nlayers,nlayersx,nlayersy,nlayersz)
#else /* MPI_USED */
      call amr_guardcell(mype,iopt,nlayers)
#endif /* MPI_USED */

!#ifdef SKIP_WHILE_TESTING
      iopt = ioptw
      nlayers = nguard_work
#ifdef MPI_USED
      lcc = .false.
      lfc = .false.
      lec = .false.
      lnc = .false.
      if(nvar.gt.0) lcc = .true.
      if(nfacevar.gt.0) lfc = .true.
      if(nvaredge.gt.0) lec = .true.
      if(nvarcorn.gt.0) lnc = .true.
      tag_offset = 100

      call amr_guardcell(mype,iopt,nlayers,nlayersx,nlayersy,nlayersz)
#else /* MPI_USED */
      call amr_guardcell(mype,iopt,nlayers)
#endif /* MPI_USED */
!#endif /* SKIP_WHILE_TESTING */

#else /* NO_PERMANENT_GUARDCELLS */

#ifdef MPI_USED
      lcc = .false.
      lfc = .false.
      lec = .false.
      lnc = .false.
      if(nvar.gt.0) lcc = .true.
      if(nfacevar.gt.0) lfc = .true.
      if(nvaredge.gt.0) lec = .true.
      if(nvarcorn.gt.0) lnc = .true.
      tag_offset = 100
      lguard    = .true.
      lprolong  = .false.
      lflux     = .false.
      ledge     = .false.
      lrestrict = .false.
      lfulltree = .false.
      call mpi_amr_comm_setup(mype,nprocs,
     .                        lguard,lprolong,lflux,ledge,
     .                        lrestrict,lfulltree,
     .                        iopt,lcc,lfc,lec,lnc,tag_offset,
     .                        nlayersx,nlayersy,nlayersz)
#endif /* MPI_USED */

#endif /* NO_PERMANENT_GUARDCELLS */

        do ii=0,nprocs-1
                if(mype.eq.ii) then
                do l=1,lnblocks
                write(*,*) 'proc ',ii,' block ',l,' coord= ',
     .                  (coord(lcoord,l),lcoord=1,ndim),
     .                  ' size = ',bsize(1,l)
                write(*,*) 'proc ',ii,' block ',l,' parent= ',
     .                  parent(1,l),parent(2,l)
                write(*,*) 'proc ',ii,' block ',l,' nodety= ',
     .                  nodetype(l)
                enddo
                endif
        call shmem_barrier_all()
        enddo

      iopt = 1

#ifdef MPI_USED
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
#endif /* MPI_USED */


      if(mype.eq.0) write(*,*) 'Start of automatic testing.'

#ifdef MPI_USED
       call amr_flush(6)
       call mpi_barrier (MPI_COMM_WORLD, errcode)
#endif /* MPI_USED */

      call shmem_barrier_all()
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! test of unk communications

      do ii=0,nprocs-1
      if(mype.eq.ii) then

      do l=1,lnblocks

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = 1
      nlayers = nguard 
      lcc = .true.
      lfc = .false.
      lec = .false.
      lnc = .false.
      l_srl_only = .false.
!     icoord = 0
      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,
     .                        lcc,lfc,lec,lnc,
     .                        l_srl_only,icoord,ldiag,
     .                        nlayersx,nlayersy,nlayersz)

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
#else
      unk1(:,:,:,:,1) = unk(:,:,:,:,l)
#endif ! NO_PERMANENT_GUARDCELLS


#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      ilbnd=il_bnd1+(nguard-nlayersx)
      iubnd=iu_bnd1-(nguard-nlayersx)
      jlbnd=jl_bnd1+(nguard-nlayersy)*k2d
      jubnd=ju_bnd1-(nguard-nlayersy)*k2d
      klbnd=kl_bnd1+(nguard-nlayersz)*k3d
      kubnd=ku_bnd1-(nguard-nlayersz)*k3d

      if(neigh(1,1,l).le.-20) ilbnd=1+nguard
      if(neigh(1,2,l).le.-20) iubnd=nxb+nguard
      if(neigh(1,3,l).le.-20) jlbnd=1+nguard
      if(neigh(1,4,l).le.-20) jubnd=nyb+nguard
      if(ndim.eq.3) then
      if(neigh(1,5,l).le.-20) klbnd=1+nguard
      if(neigh(1,6,l).le.-20) kubnd=nzb+nguard
      endif

      ngd = nguard

      if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
      dy = bsize(2,l)/real(nyb)
      dx = bsize(1,l)/real(nxb)
      if(mod(nxb,2).eq.1) then
       if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
       dy = bsize(2,l)/real(nyb-1)
       dx = bsize(1,l)/real(nxb-1)
      endif

      do k=klbnd,kubnd
      if(ndim.eq.3) then
       z0 = coord(3,l)-.5*(bsize(3,l)+dz)
       if(mod(nxb,2).eq.1) z0 = coord(3,l)-(.5*bsize(3,l)+dz)
      endif
      zk = z0 + dz*real(k-nguard)
       do j=jlbnd,jubnd
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)
       if(mod(nxb,2).eq.1) y0 = coord(2,l)-(.5*bsize(2,l)+dy)
       yj = y0 + dy*real(j-nguard)
       do i=ilbnd,iubnd
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)
       if(mod(nxb,2).eq.1) x0 = 
     .       coord(1,l)-(.5*bsize(1,l)+dx)
       xi = x0 + dx*real(i-nguard)
       do ivar=1,nvar
       value = ax*(xi**interp_mask_unk(ivar))+
     .         ay*(yj**interp_mask_unk(ivar))+
     .         az*(zk**interp_mask_unk(ivar))
       v0 = value*real(ivar)
       if(abs(v0-unk1(ivar,i,j,k,1))>accuracy) then
         write(*,998) ii,l,ivar,i,j,k,unk1(ivar,i,j,k,1),v0
         ierror_sum = ierror_sum + 1
       endif
       enddo
       enddo
       enddo
      enddo

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo

      endif
      call shmem_barrier_all()
      enddo


      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'unk test complete.'
      call amr_1blk_guardcell_reset
      call shmem_barrier_all()

!#ifdef SKIP_WHILE_TESTING

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! test of work communications

      iopt = ioptw

#ifdef MPI_USED
      lcc = .true.
      lfc = .false.
      lec = .false.
      lnc = .false. 
      tag_offset = 100
!      call mpi_amr_prolong_setup(mype,nprocs,
!     .                           iopt,lcc,lfc,lec,lnc,tag_offset)
      lguard    = .true.
      lprolong  = .false.
      lflux     = .false.
      ledge     = .false.
      lrestrict = .false.
      lfulltree = .false.
      call mpi_amr_comm_setup(mype,nprocs,
     .                        lguard,lprolong,lflux,ledge,
     .                        lrestrict,lfulltree,
     .                        iopt,lcc,lfc,lec,lnc,tag_offset,
     .                        nlayersx,nlayersy,nlayersz)
#endif /* MPI_USED */

      do ii=0,nprocs-1
      if(mype.eq.ii) then

      do l=1,lnblocks

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = ioptw
      nlayers = nguard_work
      lcc = .true.
      lfc = .false.
      lec = .false.
      lnc = .false.
      l_srl_only = .false.
!     icoord = 0
      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,
     .                        lcc,lfc,lec,lnc,
     .                        l_srl_only,icoord,ldiag,
     .                        nlayersx,nlayersy,nlayersz)

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
#else
      work1(:,:,:,1) = work(:,:,:,l,ioptw-1)
#endif   /*  NO_PERMANENT_GUARDCELLS */


#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      ilbnd=ilw1+(nguard_work-nlayersx)
      iubnd=iuw1-(nguard_work-nlayersx)
      jlbnd=jlw1+(nguard_work-nlayersy)*k2d
      jubnd=juw1-(nguard_work-nlayersy)*k2d
      klbnd=klw1+(nguard_work-nlayersz)*k3d
      kubnd=kuw1-(nguard_work-nlayersz)*k3d

      if(neigh(1,1,l).le.-20) ilbnd=1+nguard_work
      if(neigh(1,2,l).le.-20) iubnd=nxb+nguard_work
      if(neigh(1,3,l).le.-20) jlbnd=1+nguard_work
      if(neigh(1,4,l).le.-20) jubnd=nyb+nguard_work
      if(ndim.eq.3) then
      if(neigh(1,5,l).le.-20) klbnd=1+nguard_work
      if(neigh(1,6,l).le.-20) kubnd=nzb+nguard_work
      endif


      ngd = nguard_work

      if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
      dy = bsize(2,l)/real(nyb)
      dx = bsize(1,l)/real(nxb)
      if(mod(nxb,2).eq.1) then
       if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
       dy = bsize(2,l)/real(nyb-1)
       dx = bsize(1,l)/real(nxb-1)
      endif

      do k=klbnd,kubnd
      if(ndim.eq.3) then
       z0 = coord(3,l)-.5*(bsize(3,l)+dz)
       if(mod(nxb,2).eq.1) z0 = coord(3,l)-(.5*bsize(3,l)+dz)
      endif
      zk = z0 + dz*real(k-nguard_work)
       do j=jlbnd,jubnd
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)
       if(mod(nxb,2).eq.1) y0 = coord(2,l)-(.5*bsize(2,l)+dy)
       yj = y0 + dy*real(j-nguard_work)
       do i=ilbnd,iubnd
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)
       if(mod(nxb,2).eq.1) x0 = 
     .       coord(1,l)-(.5*bsize(1,l)+dx)
       xi = x0 + dx*real(i-nguard_work)
       value = ax*(xi**interp_mask_work(ioptw-1))+
     .         ay*(yj**interp_mask_work(ioptw-1))+
     .         az*(zk**interp_mask_work(ioptw-1))
       if(abs(value-work1(i,j,k,1))>accuracy) then
         write(*,997) ii,l,i,j,k,work1(i,j,k,1),value
         ierror_sum = ierror_sum + 1
       endif
       enddo
       enddo
      enddo

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif

      enddo
      endif
      call shmem_barrier_all()
      enddo


      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'work test complete.'
      call amr_1blk_guardcell_reset
      call shmem_barrier_all()
!#endif /* SKIP_WHILE_TESTING */

      if (nvarcorn > 0) then

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! test of unk_n communications
      iopt = 1
      nlayers = nguard

#ifdef MPI_USED
      lcc = .false.
      lfc = .false.
      lec = .false.
      lnc = .true.
      tag_offset = 100
!      call mpi_amr_prolong_setup(mype,nprocs,
!     .                           iopt,lcc,lfc,lec,lnc,tag_offset)
      lguard    = .true.
      lprolong  = .false.
      lflux     = .false.
      ledge     = .false.
      lrestrict = .false.
      lfulltree = .false.
      call mpi_amr_comm_setup(mype,nprocs,
     .                        lguard,lprolong,lflux,ledge,
     .                        lrestrict,lfulltree,
     .                        iopt,lcc,lfc,lec,lnc,tag_offset,
     .                        nlayersx,nlayersy,nlayersz)
#endif /* MPI_USED */
 
      do ii=0,nprocs-1
      if(mype.eq.ii) then
 
      do l=1,lnblocks
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif /* ADVANCE_ALL_LEVELS */
 
#ifdef NO_PERMANENT_GUARDCELLS
      iopt = 1
      nlayers = nguard
      lcc = .false.
      lfc = .false.
      lec = .false.
      lnc = .true.
      l_srl_only = .false.
!     icoord = 0
      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif
 
      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,
     .                        lcc,lfc,lec,lnc,
     .                        l_srl_only,icoord,ldiag,
     .                        nlayersx,nlayersy,nlayersz)
 
#else
      unk_n1(:,:,:,:,1) = unk_n(:,:,:,:,l)
#endif ! NO_PERMANENT_GUARDCELLS
 
        ilbnd=il_bnd1+(nguard-nlayersx)
        iubnd=iu_bnd1-(nguard-nlayersx)
        jlbnd=jl_bnd1+(nguard-nlayersy)*k2d
        jubnd=ju_bnd1-(nguard-nlayersy)*k2d
        klbnd=kl_bnd1+(nguard-nlayersz)*k3d
        kubnd=ku_bnd1-(nguard-nlayersz)*k3d

        if(neigh(1,1,l).le.-20) ilbnd=1+nguard
        if(neigh(1,2,l).le.-20) iubnd=nxb+nguard
        if(neigh(1,3,l).le.-20) jlbnd=1+nguard
        if(neigh(1,4,l).le.-20) jubnd=nyb+nguard
        if(ndim.eq.3) then
          if(neigh(1,5,l).le.-20) klbnd=1+nguard
          if(neigh(1,6,l).le.-20) kubnd=nzb+nguard
        endif
 
        ngd = nguard

        if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
        dy = bsize(2,l)/real(nyb)
        dx = bsize(1,l)/real(nxb)
        if(mod(nxb,2).eq.1) then
                if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                dy = bsize(2,l)/real(nyb-1)
                dx = bsize(1,l)/real(nxb-1)
        endif

      do k=klbnd,kubnd+k3d
        if(ndim.eq.3) z0 = coord(3,l)-.5*bsize(3,l)-dz
        zk = z0 + dz*real(k-nguard)
        do j=jlbnd,jubnd+k2d
          y0 = coord(2,l)-.5*bsize(2,l)-dy
          yj = y0 + dy*real(j-nguard)
          do i=ilbnd,iubnd+1
            x0 = coord(1,l)-.5*bsize(1,l)-dx
            xi = x0 + dx*real(i-nguard)
            do ivar=1,nvarcorn
              value = ax*(xi**interp_mask_nc(ivar))+
     .                ay*(yj**interp_mask_nc(ivar))+
     .                az*(zk**interp_mask_nc(ivar))
              v0 = value*real(ivar)
              if(abs(unk_n1(ivar,i,j,k,1)-v0)>accuracy) then
                      write(*,993) mype,l,ivar,i,j,k,
     .                             unk_n1(ivar,i,j,k,1),
     .                             abs(v0-unk_n1(ivar,i,j,k,1))
                      ierror_sum = ierror_sum + 1
                      endif
            enddo
          enddo
        enddo
      enddo
 
#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo
 
      endif
      call shmem_barrier_all()
      enddo
 
      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'unk_n test complete.'
      call amr_1blk_guardcell_reset
      call shmem_barrier_all()

      end if ! end if (nvarcorn > 0



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      if (nfacevar > 0) then
 
#ifdef FACE
! test of guardcell for facevar's (if appropriate)
      if(mod(nxb,2).eq.0) then

      iopt = 1
#ifdef MPI_USED
      lcc = .false.
      lfc = .true.
      lec = .false.
      lnc = .false.
      tag_offset = 100
!      call mpi_amr_prolong_setup(mype,nprocs,
!     .                           iopt,lcc,lfc,lec,lnc,tag_offset)
      lguard    = .true.
      lprolong  = .false.
      lflux     = .false.
      ledge     = .false.
      lrestrict = .false.
      lfulltree = .false.
      call mpi_amr_comm_setup(mype,nprocs,
     .                        lguard,lprolong,lflux,ledge,
     .                        lrestrict,lfulltree,
     .                        iopt,lcc,lfc,lec,lnc,tag_offset,
     .                        nlayersx,nlayersy,nlayersz)

#endif /* MPI_USED */

! test values
        do ii=0,nprocs-1
        if(mype.eq.ii) then

        do l=1,lnblocks

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = 1
      nlayers = nguard
      lcc = .false.
      lfc = .true.
      lec = .false.
      lnc = .false.
      l_srl_only = .false.
!     icoord = 0
      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,
     .                        lcc,lfc,lec,lnc,
     .                        l_srl_only,icoord,ldiag,
     .                        nlayersx,nlayersy,nlayersz)

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
#else
      facevarx1(:,:,:,:,1) = facevarx(:,:,:,:,l)
      facevary1(:,:,:,:,1) = facevary(:,:,:,:,l)
      facevarz1(:,:,:,:,1) = facevarz(:,:,:,:,l)

#endif ! NO_PERMANENT_GUARDCELLS


#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

        ilbnd=il_bnd1+(nguard-nlayersx)
        iubnd=iu_bnd1-(nguard-nlayersx)
        jlbnd=jl_bnd1+(nguard-nlayersy)*k2d
        jubnd=ju_bnd1-(nguard-nlayersy)*k2d
        klbnd=kl_bnd1+(nguard-nlayersz)*k3d
        kubnd=ku_bnd1-(nguard-nlayersz)*k3d

        if(neigh(1,1,l).le.-20) ilbnd=1+nguard
        if(neigh(1,2,l).le.-20) iubnd=nxb+nguard
        if(neigh(1,3,l).le.-20) jlbnd=1+nguard
        if(neigh(1,4,l).le.-20) jubnd=nyb+nguard
        if(ndim.eq.3) then
          if(neigh(1,5,l).le.-20) klbnd=1+nguard
          if(neigh(1,6,l).le.-20) kubnd=nzb+nguard
        endif

        ione = 1

        if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
        dy = bsize(2,l)/real(nyb)
        dx = bsize(1,l)/real(nxb)
        if(mod(nxb,2).eq.1) then
                if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                dy = bsize(2,l)/real(nyb-1)
                dx = bsize(1,l)/real(nxb-1)
        endif

! first test facevarx
#ifdef FACEX

      ngd = nguard

      do k=klbnd,kubnd
        if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
        zk = z0 + dz*real(k-nguard)
        do j=jlbnd,jubnd
          y0 = coord(2,l)-.5*(bsize(2,l)+dy)
          yj = y0 + dy*real(j-nguard)
          do i=ilbnd,iubnd+ione
            x0 = coord(1,l)-.5*bsize(1,l)-dx
            xi = x0 + dx*real(i-nguard)
            do ivar=1,nbndvar
              value = ax*(xi**interp_mask_facex(ivar))+
     .                ay*(yj**interp_mask_facex(ivar))+
     .                az*(zk**interp_mask_facex(ivar))
              v0 = value*real(ivar)
              if(abs(facevarx1(ivar,i,j,k,1)-v0)>accuracy) then
                      write(*,996) mype,l,ivar,i,j,k,
     .                             facevarx1(ivar,i,j,k,1),v0
                      ierror_sum = ierror_sum + 1
                      endif
            enddo
          enddo
        enddo
      enddo
#endif
! now test facevary
#ifdef FACEY

      ngd = nguard

      do k=klbnd,kubnd
        if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
        zk = z0 + dz*real(k-nguard)
        do i=ilbnd,iubnd
          x0 = coord(1,l)-.5*(bsize(1,l)+dx)
          xi = x0 + dx*real(i-nguard)
          do j=jlbnd,jubnd+ione
            y0 = coord(2,l)-.5*bsize(2,l)-dy
            yj = y0 + dy*real(j-nguard)
            do ivar=1,nbndvar
              value = ax*(xi**interp_mask_facey(ivar))+
     .                ay*(yj**interp_mask_facey(ivar))+
     .                az*(zk**interp_mask_facey(ivar))
              v0 = value*real(ivar)
              if(abs(facevary1(ivar,i,j,k,1)-v0)>accuracy) then
                      write(*,995) mype,l,ivar,i,j,k,
     .                             facevary1(ivar,i,j,k,1),v0
                      ierror_sum = ierror_sum + 1
              endif
            enddo
          enddo
        enddo
      enddo
#endif

! finally test facevarz
#ifdef FACEZ

      if (ndim == 3) then
      ngd = nguard

      do j=jlbnd,jubnd
        y0 = coord(2,l)-.5*(bsize(2,l)+dy)
        yj = y0 + dy*real(j-nguard)
        do i=ilbnd,iubnd
          x0 = coord(1,l)-.5*(bsize(1,l)+dx)
          xi = x0 + dx*real(i-nguard)
          do k=klbnd,kubnd+ione
            z0 = coord(3,l)-.5*bsize(3,l)-dz
            zk = z0 + dz*real(k-nguard)
            do ivar=1,nbndvar
              value = ax*(xi**interp_mask_facez(ivar))+
     .                ay*(yj**interp_mask_facez(ivar))+
     .                az*(zk**interp_mask_facez(ivar))
              v0 = value*real(ivar)
              if(abs(facevarz1(ivar,i,j,k,1)-v0)>accuracy) then
                     write(*,994) mype,l,ivar,i,j,k,
     .                             facevarz1(ivar,i,j,k,1),v0
                     ierror_sum = ierror_sum + 1
              endif
            enddo
          enddo
        enddo
      enddo
      end if
#endif

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo
      endif
      call shmem_barrier_all()
      enddo

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'face var. guard cell test complete.'
      call amr_1blk_guardcell_reset
      call shmem_barrier_all()


      endif

#endif

      end if ! end if (nfacevar > 0

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      if (nvaredge > 0) then

#ifdef EDGES
      if (ndim == 3) then
! test of guardcell for unk_e's (if appropriate)
      if(mod(nxb,2).eq.0) then
 
      iopt = 1
#ifdef MPI_USED
      lcc = .false.
      lfc = .false.
      lec = .true.
      lnc = .false.
      tag_offset = 100
      lguard    = .true.
      lprolong  = .false.
      lflux     = .false.
      ledge     = .false.
      lrestrict = .false.
      lfulltree = .false.
      call mpi_amr_comm_setup(mype,nprocs,
     .                        lguard,lprolong,lflux,ledge,
     .                        lrestrict,lfulltree,
     .                        iopt,lcc,lfc,lec,lnc,tag_offset,
     .                        nlayersx,nlayersy,nlayersz)
#endif /* MPI_USED */
 
! test values
        do ii=0,nprocs-1
        if(mype.eq.ii) then
 
        do l=1,lnblocks
 
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = 1
      nlayers = nguard
      lcc = .false.
      lfc = .false.
      lec = .true.
      lnc = .false.
      l_srl_only = .false.
!     icoord = 0
      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif
      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,
     .                        lcc,lfc,lec,lnc,
     .                        l_srl_only,icoord,ldiag,
     .                        nlayersx,nlayersy,nlayersz)
 
#else
      unk_e_x1(:,:,:,:,1) = unk_e_x(:,:,:,:,l)
      unk_e_y1(:,:,:,:,1) = unk_e_y(:,:,:,:,l)
      unk_e_z1(:,:,:,:,1) = unk_e_z(:,:,:,:,l)
 
#endif ! NO_PERMANENT_GUARDCELLS

        ilbnd=il_bnd1+(nguard-nlayersx)
        iubnd=iu_bnd1-(nguard-nlayersx)
        jlbnd=jl_bnd1+(nguard-nlayersy)*k2d
        jubnd=ju_bnd1-(nguard-nlayersy)*k2d
        klbnd=kl_bnd1+(nguard-nlayersz)*k3d
        kubnd=ku_bnd1-(nguard-nlayersz)*k3d

        if(neigh(1,1,l).le.-20) ilbnd=1+nguard
        if(neigh(1,2,l).le.-20) iubnd=nxb+nguard
        if(neigh(1,3,l).le.-20) jlbnd=1+nguard
        if(neigh(1,4,l).le.-20) jubnd=nyb+nguard
        if(ndim.eq.3) then
          if(neigh(1,5,l).le.-20) klbnd=1+nguard
          if(neigh(1,6,l).le.-20) kubnd=nzb+nguard
        endif
 
        ione = 1
 
        if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
        dy = bsize(2,l)/real(nyb)
        dx = bsize(1,l)/real(nxb)
        if(mod(nxb,2).eq.1) then
                if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                dy = bsize(2,l)/real(nyb-1)
                dx = bsize(1,l)/real(nxb-1)
        endif                                 

! first test unk_e_x
#ifdef UNKE_X
      ngd = nguard

      do k=klbnd,kubnd+ione
!      do k=nguard+1,nguard+nzb
        if(ndim.eq.3) z0 = coord(3,l)-.5*bsize(3,l)-dz
        zk = z0 + dz*real(k-nguard)
        do j=jlbnd,jubnd+ione
!        do j=nguard+1,nguard+nyb
          y0 = coord(2,l)-.5*bsize(2,l)-dy
          yj = y0 + dy*real(j-nguard)
          do i=ilbnd,iubnd
!          do i=nguard+1,nguard+nxb
            x0 = coord(1,l)-.5*(bsize(1,l)+dx)
            xi = x0 + dx*real(i-nguard)
            do ivar=1,nvaredge
              value = ax*(xi**interp_mask_ec(ivar))+
     .                ay*(yj**interp_mask_ec(ivar))+
     .                az*(zk**interp_mask_ec(ivar))
              v0 = value*real(ivar)
              if(abs(unk_e_x1(ivar,i,j,k,1)-v0)>accuracy) then
                      write(*,990) mype,l,ivar,i,j,k,
     .                             unk_e_x1(ivar,i,j,k,1),
     .                             abs(v0-unk_e_x1(ivar,i,j,k,1))
                      ierror_sum = ierror_sum + 1
                      endif
            enddo
          enddo
        enddo
      enddo
#endif
! now test unk_e_y
#ifdef UNKE_Y                     
      ngd = nguard

      do k=klbnd,kubnd+ione
!      do k=nguard+1,nguard+nzb
        if(ndim.eq.3) z0 = coord(3,l)-.5*bsize(3,l)-dz
        zk = z0 + dz*real(k-nguard)
        do i=ilbnd,iubnd+ione
!        do i=nguard+1,nguard+nxb
          x0 = coord(1,l)-.5*bsize(1,l)-dx
          xi = x0 + dx*real(i-nguard)
          do j=jlbnd,jubnd
!          do j=nguard+1,nguard+nyb
            y0 = coord(2,l)-.5*(bsize(2,l)+dy)
            yj = y0 + dy*real(j-nguard)
            do ivar=1,nvaredge
              value = ax*(xi**interp_mask_ec(ivar))+
     .                ay*(yj**interp_mask_ec(ivar))+
     .                az*(zk**interp_mask_ec(ivar))
              v0 = value*real(ivar)
              if(abs(unk_e_y1(ivar,i,j,k,1)-v0)>accuracy) then
                      write(*,991) mype,l,ivar,i,j,k,
     .                             unk_e_y1(ivar,i,j,k,1),
     .                             abs(v0-unk_e_y1(ivar,i,j,k,1))
                      ierror_sum = ierror_sum + 1
              endif
            enddo
          enddo
        enddo
      enddo
#endif
 
! finally test unk_e_z
#ifdef UNKE_Z                       
      ngd = nguard

      do j=jlbnd,jubnd+ione
!      do j=nguard+1,nguard+nyb
        y0 = coord(2,l)-.5*bsize(2,l)-dy
        yj = y0 + dy*real(j-nguard)
        do i=ilbnd,iubnd+ione
!        do i=nguard+1,nguard+nxb
          x0 = coord(1,l)-.5*bsize(1,l)-dx
          xi = x0 + dx*real(i-nguard)
          do k=klbnd,kubnd
!          do k=nguard+1,nguard+nzb
            z0 = coord(3,l)-.5*(bsize(3,l)+dz)
            zk = z0 + dz*real(k-nguard)
            do ivar=1,nvaredge
              value = ax*(xi**interp_mask_ec(ivar))+
     .                ay*(yj**interp_mask_ec(ivar))+
     .                az*(zk**interp_mask_ec(ivar))
              v0 = value*real(ivar)
              if(abs(unk_e_z1(ivar,i,j,k,1)-v0)>accuracy) then
                     write(*,992) mype,l,ivar,i,j,k,
     .                             unk_e_z1(ivar,i,j,k,1),
     .                             abs(v0-unk_e_z1(ivar,i,j,k,1))
                     ierror_sum = ierror_sum + 1
              endif
            enddo
          enddo
        enddo
      enddo
#endif
 
#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo
      endif
      call shmem_barrier_all()
      enddo
 
      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'unk_e. guard cell test complete.'
      call shmem_barrier_all()         
      call amr_1blk_guardcell_reset
      call shmem_barrier_all()

      endif

      end if

      end if ! end if (nvaredge > 0.

#endif
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      if(mype.eq.0) write(*,*) 
     .   'End of automatic testing for icoord = ',iloop
      call shmem_barrier_all()

      enddo                                  ! end of icoord loop


      call shmem_barrier_all()

      call comm_int_sum_to_all(ierror_tot,ierror_sum)

      call shmem_barrier_all()


      lmpi = .false.
      lnperm = .false.
      ladvanceall = .false.
#ifdef MPI_USED
          lmpi = .true.
#endif
#ifdef NO_PERMANENT_GUARDCELLS
          lnperm = .true.
#endif
#ifdef ADVANCE_ALL_LEVELS
          ladvanceall = .true.
#endif
      if(mype.eq.0) then
      open(unit = 55,file='test.log',
     .            status='unknown',position='append')
        write(*,*) ' '
        write(*,*) ' '
        if(ierror_tot.eq.0) then
          write(*,*) 'No errors detected - Test Successful '
          write(55,*) 'No errors detected - ',
     .                'Test of 1blk_guardcell_big Successful ',
     .                ': nprocs ',nprocs,' ndim ',ndim,
     .                ' noperm ',lnperm,' advanceall ',ladvanceall,
     .                ' mpi ',lmpi
        else
          write(*,*) ierror_tot,' errors detected - Test failed '
          write(55,*) ierror_tot,' errors detected - ',
     .                'Test of blk_guardcell_big failed ',
     .                ': nprocs ',nprocs,' ndim ',ndim,
     .                ' noperm ',lnperm,' advanceall ',ladvanceall,
     .                ' mpi ',lmpi
        endif
      close(unit=55)
      endif


      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Start guardcell consistency check.'
      call shmem_barrier_all()

!      call guardcell_test(mype)

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Guardcell consistency check done.'
      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Start mesh check.'
      call shmem_barrier_all()

      call mesh_test(mype)

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Mesh check done.'
      call shmem_barrier_all()

 2    call amr_close()

         
998      format('u:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)
997      format('w:error proc ',i3,' block l= ',4(2x,i3),2x,f7.4,2x,
     .       f7.4)
996      format('fx:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)
995      format('fy:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)
994      format('fz:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)

993      format('n:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       e10.5)
992      format('ez:error proc ',i3,' block l= ',5(2x,i3),2x,f10.7,2x,
     .       e10.5)
991      format('ey:error proc ',i3,' block l= ',5(2x,i3),2x,f10.7,2x,
     .       e10.5)
990      format('ex:error proc ',i3,' block l= ',5(2x,i3),2x,f10.7,2x,
     .       e10.5)

#ifdef LIBRARY
      deallocate(tnewchild)
#endif

      end
