Map of MPI communications routines
----------------------------------


Our current MPI communications work in the following way:


For a given communication dependent operation ( guardcell filling for example)
we
     a. generate the control info defining the blocks which must
        be exchanged between processors
     b. use this control info to package the required data into a
        send buffer array
     c. post receives and sends
     d. use the control info to unpack the received data into
        buffer blocks at the end of the local processors list of blocks.


a. Constructing control information.
------------------------------------

This info is prepared by the routines called
    mpi_morton_bnd          (for guardcell filling)
    mpi_morton_bnd_prolong  (for prolongation)
    mpi_morton_bnd_restrict (for prolongation)
    mpi_morton_bnd_fluxcon  (for prolongation).

These routines are all very similar in structure and function.
They work by constucting lists using a set of generic arrays. 
On each processor we define the following generic lists
     1. a list of the addresses of off-processor blocks from which info
        will be needed
     2. a list of the addresses of on-processor blocks which will be
        asked to provide info to other processors.
     3. a matrix of the no. of blocks involved in inter-processor
        communications between all processor pairs.

When any of these routines execute, the generic lists which they
produce are copied into operation specific versions of these lists.
This is done by calling the routine
        mpi_amr_store_comm_info.
In this way, we remember the control information required for this
operation, when it is next needed. The control info is only updated
when the grid is modified, or when a job is restarted after checkpointing.


b-d. Package info to be sent, post receives and sends, send data.
------------------------------------------------------------------

The high-level routine which is called to do this is
        mpi_amr_comm_setup.
It accepts a list of argument which tell it what type of communication
operation (guardcell filling, restriction, prolongation or flux conservation)
is required.

Inside this routine -
the first step is to read the control info from the lists appropriate for
this operation (eg guardcell filling), into the equivalent generic arrays.

This is done by calling one of these routines
        mpi_amr_read_guard_comm
        mpi_amr_read_prol_comm
        mpi_amr_read_flux_comm
        mpi_amr_read_restrict_comm.

Then a send buffer array called send_buf, and a receive buffer array
called recv_buf, are allocated with the required dimensions.
Note, the array send_buf contains all the data which a processor will
send off processor, with the data ordered in sequence according to
the off-processor pe number. The same ordering applies to recv_buf.

The data which is to be communicated is packed into send_buf by one of
the routines
        mpi_pack_blocks
        mpi_pack_fluxes
        mpi_pack_edges.

The message is actually executed by calling 
        mpi_xchange_blocks.

It is unpacked from recv_buf by one of
        mpi_unpack_blocks
        mpi_unpack_fluxes
        mpi_unpack_edges.



Low level routines
------------------

mpi_get_buffer

This is called by mpi_pack_blocks. It gathers data from the requested
block and puts it into the appropriate part of the send_buf array.

        
