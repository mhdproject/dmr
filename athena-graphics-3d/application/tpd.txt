From turlough.downes@dcu.ie Sat Sep 20 10:05:10 2003
Date: Sat, 20 Sep 2003 14:59:57 +0100 (IST)
From: Turlough Downes <turlough.downes@dcu.ie>
To: Stephen O'Sullivan <sdo@khumbu.gsfc.nasa.gov>


/***************************************************************************/
/********************  Stuff for injecting energy for the pulsar ***********/
/***************************************************************************/


/* Work out stuff for volume averages, given a linear shear - see 
 * initialise() and ../README. */
	correction=(1.0-pow(beta, 4.0))/(4.0*(1.0-beta));
/* This is the old delta_den - we're decreasing this now to get a
 * terminal velocity of 3 times what it was 
	delta_den = ((1.0e+08/correction)*dt*3.0/
		(4.0*PI*pow(cloud_radius,3.0)));
		*/
	delta_den = ((1.0e+08/correction)*dt*3.0/
		(4.0*PI*pow(cloud_radius,3.0)));
	delta_den/=9.0;  /* This is the bit ... */
	delta_e =((5.0e+15/correction)*dt*3.0/(4.0*PI*pow(cloud_radius,3.0)));

	for(i=2;i<nx_cells;i++){ /* Loop over horizontal */
		for(j=2;j<ny_cells;j++){ /* Loop over vertical */

/* Work out global indices of this cell */

			global_index1 = left_boundary+i-2;
			global_index2 = bottom_boundary+j-2;

			distance = sqrt((global_index1-nx_cells_tot/2)*(global_index1-
				nx_cells_tot/2)*dx1*dx1 + global_index2*global_index2*dx2*dx2);

			if(distance < cloud_radius){
/* For a discussion of the use of the shear and beta, see initialise() */

				if(distance > beta*cloud_radius)
					shear=(cloud_radius-distance)/(cloud_radius*(1.0-beta));
				else
					shear=1.0;

/* And explicitly add thermal pressure */
				cell[i][j].ne +=delta_e*shear;
				cell[i][j].nden+=delta_den*shear;


/***************************************************************************/
/************************* Stuff for initialising **************************/
/***************************************************************************/



/* Let beta*R be the distance at which the shear first becomes non-1.  Then
 * the volume-averaged value of the shear is given by the equation
 * <shear> = (1-beta^4)/(4*(1-beta))
 * This is used to correct the initden and initp values so that the total
 * density and energy released are correct. */

		correction=(1.0-pow(beta, 4.0))/(4.0*(1.0-beta));

		for(i=0;i<nx_cells+2;i++){ /* Loop over horizontal */
			for(j=0;j<ny_cells+2;j++){ /* Loop over vertical */

/* Work out global indices of this cell */

				global_index1 = left_boundary+i-2;
				global_index2 = bottom_boundary+j-2;

/* Determine the centre of gravity in the x2 direction (i.e. r-direction
 * if we're talking cylindrical.  So cell[i][J] has centre of gravity at
 * r_g[J] */

				if(i==2){
					if(CYLINDRICAL){  /* Cylindrical symmetry */
						r1=(double)(global_index2-2)*dx2;
						r2=(double)(global_index2-1)*dx2;
						r_g[j]=2.0*(r2*r2*r2-r1*r1*r1)/(3.0*(r2*r2-r1*r1));
					}
					else /* Slab symmetry */
						r_g[j]=(0.5+(double)(global_index2-2))*dx2;
				}
/*  This puts in the supernova */
				distance=sqrt((global_index1-nx_cells_tot/2)*(global_index1-
					nx_cells_tot/2)*dx1*dx1+global_index2*global_index2*dx2*dx2);

				if(distance < radius){
					if(distance > beta*radius)
						shear=(radius-distance)/(radius*(1.0-beta));
					else
						shear=1.0;
	
					initden[i][j]=((inflow_den/correction)*3.0/(4.0*PI*radius*radius*
						radius))*shear + (1.0-shear)*ambient_den;
/* I am assuming a gamma=5/3 (non-relativistic) gas */
					initp[i][j]=((inflow_p/correction)*3.0/(1.5*4.0*PI*radius*radius*
						radius))*shear + (1.0-shear)*ambient_p;


-- 
**************************************************************************
Dr Turlough Downes                           Email: turlough.downes@dcu.ie
School of Mathematical Sciences,          URL: http://www.dcu.ie/~downest/
Dublin City University,                               Tel: +353-1-700 5270
Glasnevin,                                            FAX: +353-1-700 5786
Dublin 9,
Ireland.
**************************************************************************
