!----------------------------------------------------------------------
! PARAMESH - an adaptive mesh library.
! Copyright (C) 2003
!
! Use of the PARAMESH software is governed by the terms of the
! usage agreement which can be found in the file
! 'PARAMESH_USERS_AGREEMENT' in the main paramesh directory.
!----------------------------------------------------------------------

#include "paramesh_preprocessor.fh"


      program test_c_to_f




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! include file to define physical qualities of the model and mesh
      use physicaldata

! include file defining the tree
      use tree
      use workspace

      use paramesh_interfaces, only : comm_start,
     &                                amr_initialize,
     &                                amr_refine_derefine,
     &                                amr_1blk_copy_soln,
     &                                amr_guardcell,
     &                                amr_prolong,
     &                                amr_1blk_guardcell,
     &                                amr_1blk_guardcell_reset,
     &                                guardcell_test,
     &                                mesh_test,
     &                                amr_close


! include file required for shmem library.
#include "amr_shmem.fh"
      include 'shmem_reduce.fh'

! Only required for programs in ./Tests
#include "test_defs.fh"

      integer nguard0
      parameter(nguard0 = nguard*npgs)
      integer nguard_work0
      parameter(nguard_work0 = nguard_work*npgs)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! local amr variables
      integer nprocs,mype
      integer shmem_my_pe,shmem_n_pes,num_procs

      save mype

      logical tnewchild(maxblocks_tr)

!
! application specific variables

      integer iopt,nlayers,icoord
      integer ierror_sum,ierror_tot
      logical lrefine_again,ltype2only
      logical rflags(maxblocks_tr)
      logical lcc, lfc, l_srl_only, ldiag

      save ierror_sum,ierror_tot

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifdef SGI_SHMEM
      call comm_start(maxprocs,nprocs,mype)
#endif
      call amr_initialize


#ifdef CONSERVE
      write(*,*) 'CONSERVE must not be define dfor this test!'
      call amr_abort()
#endif

      mype = shmem_my_pe()
      nprocs = shmem_n_pes()

      print *,' nprocs = ',nprocs,mype

      write(*,*) ' SHMEM_REDUCE_SYNC_SIZE ',SHMEM_REDUCE_SYNC_SIZE
      write(*,*) ' SHMEM_REDUCE_MIN_WRKDATA_SIZE ',
     .                SHMEM_REDUCE_MIN_WRKDATA_SIZE


! set default value of dz and z0 to cater for 2D case.
      z0 = 0.
      dz = 0.

      rflags(:) = .true.

      ierror_sum = 0
      ierror_tot = 0

      iopt = 1
      nlayers = nguard
      if(mype.eq.0) write(*,*) 'nlayers = ',nlayers

!

! set a limit on the refinement level
      lrefine_max = 5
      lrefine_min = 1

      ax = 1.
      ay = 10.
      az = 100.
#ifdef TESTXDIR
      ax = 1.
      ay = 0.
      az = 0.
#endif
#ifdef TESTYDIR
      ax = 0.
      ay = 1.
      az = 0.
#endif
#ifdef TESTZDIR
      if (ndim == 3) then
      ax = 0.
      ay = 0.
      az = 1.
      end if
#endif


! set the workspace array layer to be tested
      ioptw = 3

      if(ioptw-1.gt.nvar_work) then
          write(*,*) 'ERROR: Too few work arrays'
          write(*,*) 'ERROR: Reset nvar_work.'
          call amr_abort
      endif


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! set up initial grid state.

! set up a single block covering the whole cubic domain
      lnblocks = 0
      if(mype.eq.0.) then
                lnblocks = 1
                bsize(:,1)=1.
                coord(:,1) = .5
                bnd_box(1,:,1) = .0
                bnd_box(2,:,1) = 1.0
                nodetype(1) = 1
                lrefine(1) = 1

                neigh(:,:,1) = -21

                refine(1)=.true.
        endif

        call shmem_barrier_all()


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!start test
! set the solution array to be the grid points x,y or z coordinates
        do l=1,lnblocks
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      if(mod(nxb,2).eq.0) then
       if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
       dy = bsize(2,l)/real(nyb)
       dx = bsize(1,l)/real(nxb)

       do k=1,nzb+2*nguard0*k3d
       do j=1,nyb+2*nguard0
       do i=1,nxb+2*nguard0
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)+dx*real(i-nguard0)
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)+dy*real(j-nguard0)
       if(ndim.eq.3) z0 = 
     .       coord(3,l)-.5*(bsize(3,l)+dz)+dz*real(k-nguard0)
       value = ax*x0 + ay*y0 + az*z0
       do ivar=1,nvar
       unk(ivar,i,j,k,l) = value*real(ivar)
       enddo
       enddo
       enddo
       enddo

      else
       if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
       dy = bsize(2,l)/real(nyb-1)
       dx = bsize(1,l)/real(nxb-1)

       do k=1,nzb+2*nguard0*k3d
       do j=1,nyb+2*nguard0
       do i=1,nxb+2*nguard0
       x0 = coord(1,l)-.5*bsize(1,l)-dx+dx*real(i-nguard0)
       y0 = coord(2,l)-.5*bsize(2,l)-dy+dy*real(j-nguard0)
       if(ndim.eq.3) z0 = 
     .       coord(3,l)-.5*bsize(3,l)-dz+dz*real(k-nguard0)
       value = ax*x0 + ay*y0 + az*z0
       do ivar=1,nvar
       unk(ivar,i,j,k,l) = value*real(ivar)
       enddo
       enddo
       enddo
       enddo

      endif

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo
      call shmem_barrier_all()



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! set up data in facevarx etc

      if(mod(nxb,2).eq.0) then


        do l=1,lnblocks
#ifndef ADVANCE_ALL_LEVELS
        if(nodetype(l).eq.1) then
#endif


              if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
              dy = bsize(2,l)/real(nyb)
              dx = bsize(1,l)/real(nxb)
              if(mod(nxb,2).eq.1) then
                      if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                      dy = bsize(2,l)/real(nyb-1)
                      dx = bsize(1,l)/real(nxb-1)
              endif


              do k=1,nzb+2*nguard0*k3d
                if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
                zk = z0 + dz*real(k-nguard0)
                  do j=1,nyb+2*nguard0
                    y0 = coord(2,l)-.5*(bsize(2,l)+dy)
                    yj = y0 + dy*real(j-nguard0)
                    do i=1,nxb+2*nguard0+1
                      x0 = coord(1,l)-.5*bsize(1,l)-dx
                      xi = x0 + dx*real(i-nguard0)
                      do ivar=1,nbndvar
                        value = ax*xi+ay*yj+az*zk
                        facevarx(ivar,i,j,k,l)=value*real(ivar)
                      enddo
                    enddo
                  enddo
              enddo

              do k=1,nzb+2*nguard0*k3d
                if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
                zk = z0 + dz*real(k-nguard0)
                do i=1,nxb+2*nguard0
                  x0 = coord(1,l)-.5*(bsize(1,l)+dx)
                  xi = x0 + dx*real(i-nguard0)
                  do j=1,nyb+(2*nguard0+1)*k2d
                    y0 = coord(2,l)-.5*bsize(2,l)-dy
                    yj = y0 + dy*real(j-nguard0)
                    do ivar=1,nbndvar
                      value = ax*xi+ay*yj+az*zk
                      facevary(ivar,i,j,k,l)=value*real(ivar)
                    enddo
                  enddo
                enddo
              enddo

              do j=1,nyb+2*nguard0
                y0 = coord(2,l)-.5*(bsize(2,l)+dy)
                yj = y0 + dy*real(j-nguard0)
                do i=1,nxb+2*nguard0
                  x0 = coord(1,l)-.5*(bsize(1,l)+dx)
                  xi = x0 + dx*real(i-nguard0)
                  do k=1,nzb+(2*nguard0+1)*k3d
                    if(ndim.eq.3) z0 = 
     .                       coord(3,l)-.5*bsize(3,l)-dz
                    zk = z0 + dz*real(k-nguard0)
                    do ivar=1,nbndvar
                      value = ax*xi+ay*yj+az*zk
                      facevarz(ivar,i,j,k,l)=value*real(ivar)
                    enddo
                  enddo
                enddo
              enddo

#ifndef ADVANCE_ALL_LEVELS
        endif
#endif
      enddo

      endif
      call shmem_barrier_all()

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      loop_count=0
! Now cycle over blocks adjusting refinement of initial setup as required
        do while(loop_count.lt.3)


        refine(:) = .false.
      if(loop_count.lt.2) then
       refine(:) = .true.
      elseif(loop_count.eq.2) then
      if(ndim.eq.3) then
       do l=1,lnblocks
       if( coord(1,l).eq..125.and.coord(2,l).eq..125.and.
     .       coord(3,l).eq..125) refine(l)=.true.
       if( coord(1,l).eq..375.and.coord(2,l).eq..375.and.
     .       coord(3,l).eq..375) refine(l)=.true.
       if( coord(1,l).eq..625.and.coord(2,l).eq..875.and.
     .       coord(3,l).eq..875) refine(l)=.true.
       enddo
      elseif(ndim.eq.2) then
                do l=1,lnblocks
                if( coord(1,l).eq..125.and.coord(2,l).eq..125)
     .                 refine(l)=.true.
                if( coord(1,l).eq..375.and.coord(2,l).eq..375)
     .                 refine(l)=.true.
                if( coord(1,l).eq..625.and.coord(2,l).eq..875)
     .                 refine(l)=.true.
                enddo

      endif
      endif


! refine grid and apply morton reordering to grid blocks if necessary
      call amr_refine_derefine

      noff = (nguard_work - nguard)*npgs
      if(noff.ge.0) then
        work(il_bnd+noff:iu_bnd+noff,jl_bnd+noff*k2d:ju_bnd+noff*k2d,
     .       kl_bnd+noff*k3d:ku_bnd+noff*k3d,:,ioptw-1) = 
     .   unk(1,il_bnd:iu_bnd,jl_bnd:ju_bnd,kl_bnd:ku_bnd,:)
      else
        work(ilw:iuw,jlw:juw,klw:kuw,:,ioptw-1) =
     .   unk(1,il_bnd-noff:iu_bnd+noff,
     .         jl_bnd-noff*k2d:ju_bnd+noff*k2d,
     .         kl_bnd-noff*k3d:ku_bnd+noff*k3d,:)
      endif

      call shmem_barrier_all()

! a global prolongation call resets the newchild marker flags to false.
! Thus to test prolong for work we will need to restore this after the
! prolongation is applied to unk and facevar's
      tnewchild(:) = newchild(:)

      iopt = 1
      nlayers = nguard
      call amr_prolong(mype,iopt,nlayers)

      newchild(:) = tnewchild(:)
      iopt = ioptw
      nlayers = nguard_work
      call amr_prolong(mype,iopt,nlayers)


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifdef NO_PERMANENT_GUARDCELLS
! Store a copy of the current solution in gt_unk
      call amr_1blk_copy_soln

#else /* NO_PERMANENT_GUARDCELLS */


! set guard cell data to zero to ensure proper test of guardcell
! set external guard cell data.
        call zero_guardcells(ioptw)

        iopt = 1
        nlayers = nguard
        call amr_guardcell(mype,iopt,nlayers)
!        call shmem_barrier_all()
!        write(*,*) 'unk guardcell call done'
!        call amr_flush(101)
!        call shmem_barrier_all()

        iopt = ioptw
        nlayers = nguard_work
        call amr_guardcell(mype,iopt,nlayers)

#endif  /* NO_PERMANENT_GUARDCELLS */
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


        loop_count=loop_count+1
        write(*,*) 'proc loop_count ',mype,loop_count

        enddo
        call shmem_barrier_all()

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        do ii=0,nprocs-1
                if(mype.eq.ii) then
                do l=1,lnblocks
                write(*,*) 'proc ',ii,' block ',l,' coord= ',
     .                  (coord(icoord,l),icoord=1,ndim),
     .                  ' size = ',bsize(1,l)
                write(*,*) 'proc ',ii,' block ',l,' parent= ',
     .                  parent(1,l),parent(2,l)
                write(*,*) 'proc ',ii,' block ',l,' nodety= ',
     .                  nodetype(l)
                enddo
                endif
        call shmem_barrier_all()
        call amr_flush(101)
        call shmem_barrier_all()
        enddo

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      if(mype.eq.0) write(*,*) 'Start of automatic testing.'
      call shmem_barrier_all()

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! test of unk communications

      do ii=0,nprocs-1
      if(mype.eq.ii) then

      do l=1,lnblocks

      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = 1
      nlayers = nguard 
      lcc = .true.
      lfc = .true.
      l_srl_only = .false.
      icoord = 0
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif
       call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,lcc,lfc,
     .                           l_srl_only,icoord,ldiag)
#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
#else
      unk1(:,:,:,:,1) = unk(:,:,:,:,l)
#endif ! NO_PERMANENT_GUARDCELLS


#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      ilbnd=il_bnd1
      iubnd=iu_bnd1
      jlbnd=jl_bnd1
      jubnd=ju_bnd1
      klbnd=kl_bnd1
      kubnd=ku_bnd1

      if(neigh(1,1,l).le.-20) ilbnd=1+nguard
      if(neigh(1,2,l).le.-20) iubnd=nxb+nguard
      if(neigh(1,3,l).le.-20) jlbnd=1+nguard
      if(neigh(1,4,l).le.-20) jubnd=nyb+nguard
      if(ndim.eq.3) then
      if(neigh(1,5,l).le.-20) klbnd=1+nguard
      if(neigh(1,6,l).le.-20) kubnd=nzb+nguard
      endif

      if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
      dy = bsize(2,l)/real(nyb)
      dx = bsize(1,l)/real(nxb)
      if(mod(nxb,2).eq.1) then
       if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
       dy = bsize(2,l)/real(nyb-1)
       dx = bsize(1,l)/real(nxb-1)
      endif

      do k=klbnd,kubnd
      if(ndim.eq.3) then
       z0 = coord(3,l)-.5*(bsize(3,l)+dz)
       if(mod(nxb,2).eq.1) z0 = coord(3,l)-(.5*bsize(3,l)+dz)
      endif
      zk = z0 + dz*real(k-nguard)
       do j=jlbnd,jubnd
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)
       if(mod(nxb,2).eq.1) y0 = coord(2,l)-(.5*bsize(2,l)+dy)
       yj = y0 + dy*real(j-nguard)
       do i=ilbnd,iubnd
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)
       if(mod(nxb,2).eq.1) x0 = 
     .       coord(1,l)-(.5*bsize(1,l)+dx)
       xi = x0 + dx*real(i-nguard)
       value = ax*xi+ay*yj+az*zk
       do ivar=1,nvar
       v0 = value*real(ivar)
       if(v0.ne.unk1(ivar,i,j,k,1)) then
         write(*,998) ii,l,ivar,i,j,k,unk1(ivar,i,j,k,1),v0
         ierror_sum = ierror_sum + 1
       endif
       enddo
       enddo
       enddo
      enddo

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo

      endif
      call shmem_barrier_all()
      enddo

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'unk test complete.'
      call shmem_barrier_all()
      call amr_1blk_guardcell_reset
      call shmem_barrier_all()


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! test of work communications

      do ii=0,nprocs-1
      if(mype.eq.ii) then

      do l=1,lnblocks

      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = ioptw
      nlayers = nguard_work
      lcc = .true.
      lfc = .false.
      l_srl_only = .false.
      icoord = 0
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif
      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,lcc,lfc,
     .                           l_srl_only,icoord,ldiag)
#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
#else
      work1(:,:,:,1) = work(:,:,:,l,ioptw-1)
#endif   /*  NO_PERMANENT_GUARDCELLS */


#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

      ilbnd=ilw1
      iubnd=iuw1
      jlbnd=jlw1
      jubnd=juw1
      klbnd=klw1
      kubnd=kuw1

      if(neigh(1,1,l).le.-20) ilbnd=1+nguard_work
      if(neigh(1,2,l).le.-20) iubnd=nxb+nguard_work
      if(neigh(1,3,l).le.-20) jlbnd=1+nguard_work
      if(neigh(1,4,l).le.-20) jubnd=nyb+nguard_work
      if(ndim.eq.3) then
      if(neigh(1,5,l).le.-20) klbnd=1+nguard_work
      if(neigh(1,6,l).le.-20) kubnd=nzb+nguard_work
      endif

      if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
      dy = bsize(2,l)/real(nyb)
      dx = bsize(1,l)/real(nxb)
      if(mod(nxb,2).eq.1) then
       if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
       dy = bsize(2,l)/real(nyb-1)
       dx = bsize(1,l)/real(nxb-1)
      endif

      do k=klbnd,kubnd
      if(ndim.eq.3) then
       z0 = coord(3,l)-.5*(bsize(3,l)+dz)
       if(mod(nxb,2).eq.1) z0 = coord(3,l)-(.5*bsize(3,l)+dz)
      endif
      zk = z0 + dz*real(k-nguard_work)
       do j=jlbnd,jubnd
       y0 = coord(2,l)-.5*(bsize(2,l)+dy)
       if(mod(nxb,2).eq.1) y0 = coord(2,l)-(.5*bsize(2,l)+dy)
       yj = y0 + dy*real(j-nguard_work)
       do i=ilbnd,iubnd
       x0 = coord(1,l)-.5*(bsize(1,l)+dx)
       if(mod(nxb,2).eq.1) x0 = 
     .       coord(1,l)-(.5*bsize(1,l)+dx)
       xi = x0 + dx*real(i-nguard_work)
       value = ax*xi+ay*yj+az*zk
       if(value.ne.work1(i,j,k,1)) then
         write(*,997) ii,l,i,j,k,work1(i,j,k,1),value
         ierror_sum = ierror_sum + 1
       endif
       enddo
       enddo
      enddo

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif

      enddo
      endif
      call shmem_barrier_all()
      enddo


      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'work test complete.'
      call shmem_barrier_all()

      call amr_1blk_guardcell_reset
      call shmem_barrier_all()


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#ifdef FACE
! test of guardcell for facevar's (if appropriate)
      if(mod(nxb,2).eq.0) then


! test values
        do ii=0,nprocs-1
        if(mype.eq.ii) then

        do l=1,lnblocks

      ldiag = .false.
#ifdef DIAGONALS
      ldiag = .true.
#endif

#ifdef NO_PERMANENT_GUARDCELLS
      iopt = 1
      nlayers = nguard
      lcc = .true.
      lfc = .true.
      l_srl_only = .false.
      icoord = 0
#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif
      call amr_1blk_guardcell(mype,iopt,nlayers,l,mype,lcc,lfc,
     .                        l_srl_only,icoord,ldiag)
#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
#else
      facevarx1(:,:,:,:,1) = facevarx(:,:,:,:,l)
      facevary1(:,:,:,:,1) = facevary(:,:,:,:,l)
      facevarz1(:,:,:,:,1) = facevarz(:,:,:,:,l)

#endif ! NO_PERMANENT_GUARDCELLS


#ifndef ADVANCE_ALL_LEVELS
      if(nodetype(l).eq.1) then
#endif

        ilbnd=il_bnd1
        iubnd=iu_bnd1
        jlbnd=jl_bnd1
        jubnd=ju_bnd1
        klbnd=kl_bnd1
        kubnd=ku_bnd1

        if(neigh(1,1,l).le.-20) ilbnd=1+nguard
        if(neigh(1,2,l).le.-20) iubnd=nxb+nguard
        if(neigh(1,3,l).le.-20) jlbnd=1+nguard
        if(neigh(1,4,l).le.-20) jubnd=nyb+nguard
        if(ndim.eq.3) then
          if(neigh(1,5,l).le.-20) klbnd=1+nguard
          if(neigh(1,6,l).le.-20) kubnd=nzb+nguard
        endif

        ione = 1

        if(ndim.eq.3) dz = bsize(3,l)/real(nzb)
        dy = bsize(2,l)/real(nyb)
        dx = bsize(1,l)/real(nxb)
        if(mod(nxb,2).eq.1) then
                if(ndim.eq.3) dz = bsize(3,l)/real(nzb-k3d)
                dy = bsize(2,l)/real(nyb-1)
                dx = bsize(1,l)/real(nxb-1)
        endif

! first test facevarx
#ifdef FACEX
      do k=klbnd,kubnd
        if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
        zk = z0 + dz*real(k-nguard)
        do j=jlbnd,jubnd
          y0 = coord(2,l)-.5*(bsize(2,l)+dy)
          yj = y0 + dy*real(j-nguard)
          do i=ilbnd,iubnd+ione
            x0 = coord(1,l)-.5*bsize(1,l)-dx
            xi = x0 + dx*real(i-nguard)
            value = ax*xi+ay*yj+az*zk
            do ivar=1,nbndvar
              v0 = value*real(ivar)
              if(facevarx1(ivar,i,j,k,1).ne.v0) then
                      write(*,996) mype,l,ivar,i,j,k,
     .                             facevarx1(ivar,i,j,k,1),v0
                      ierror_sum = ierror_sum + 1
                      endif
            enddo
          enddo
        enddo
      enddo
#endif
! now test facevary
#ifdef FACEY

      do k=klbnd,kubnd
        if(ndim.eq.3) z0 = coord(3,l)-.5*(bsize(3,l)+dz)
        zk = z0 + dz*real(k-nguard)
        do i=ilbnd,iubnd
          x0 = coord(1,l)-.5*(bsize(1,l)+dx)
          xi = x0 + dx*real(i-nguard)
          do j=jlbnd,jubnd+ione
            y0 = coord(2,l)-.5*bsize(2,l)-dy
            yj = y0 + dy*real(j-nguard)
            value = ax*xi+ay*yj+az*zk
            do ivar=1,nbndvar
              v0 = value*real(ivar)
              if(facevary1(ivar,i,j,k,1).ne.v0) then
                      write(*,995) mype,l,ivar,i,j,k,
     .                             facevary1(ivar,i,j,k,1),v0
                      ierror_sum = ierror_sum + 1
              endif
            enddo
          enddo
        enddo
      enddo
#endif

! finally test facevarz
#ifdef FACEZ
      if(ndim == 3) then
      do j=jlbnd,jubnd
        y0 = coord(2,l)-.5*(bsize(2,l)+dy)
        yj = y0 + dy*real(j-nguard)
        do i=ilbnd,iubnd
          x0 = coord(1,l)-.5*(bsize(1,l)+dx)
          xi = x0 + dx*real(i-nguard)
          do k=klbnd,kubnd+ione
            z0 = coord(3,l)-.5*bsize(3,l)-dz
            zk = z0 + dz*real(k-nguard)
            value = ax*xi+ay*yj+az*zk
            do ivar=1,nbndvar
              v0 = value*real(ivar)
              if(facevarz1(ivar,i,j,k,1).ne.v0) then
                     write(*,994) mype,l,ivar,i,j,k,
     .                             facevarz1(ivar,i,j,k,1),v0
                     ierror_sum = ierror_sum + 1
              endif
            enddo
          enddo
        enddo
      enddo
      end if
#endif

#ifndef ADVANCE_ALL_LEVELS
      endif
#endif
      enddo
      endif
      call shmem_barrier_all()
      enddo

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'face var. guard cell test complete.'
      call shmem_barrier_all()

      endif

#endif
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      if(mype.eq.0) write(*,*) 'End of automatic testing.'
      call shmem_barrier_all()

      call comm_int_sum_to_all(ierror_tot,ierror_sum)

      call shmem_barrier_all()


      if(mype.eq.0) then
        write(*,*) ' '
        write(*,*) ' '
        if(ierror_tot.eq.0) then
          write(*,*) 'No errors detected - Test Successful '
        else
          write(*,870) ierror_tot
870      format(i3,' errors detected - Test Failed ')
        endif
      endif

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Start guardcell consistency check.'
      call shmem_barrier_all()

      call guardcell_test(mype)

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Guardcell consistency check done.'
      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Start mesh check.'
      call shmem_barrier_all()

      call mesh_test(mype)

      call shmem_barrier_all()
      if(mype.eq.0) write(*,*) 'Mesh check done.'
      call shmem_barrier_all()

      call amr_close()

         
998      format('u:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)
997      format('w:error proc ',i3,' block l= ',4(2x,i3),2x,f7.4,2x,
     .       f7.4)
996      format('fx:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)
995      format('fy:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)
994      format('fz:error proc ',i3,' block l= ',5(2x,i3),2x,f7.4,2x,
     .       f7.4)

      end
